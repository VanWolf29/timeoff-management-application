name: "Deployment"

on:
  push:
    branches:
      - master

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create terraform backend
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: deployment/backend/

      - name: Create infrastructure
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: deployment/

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: timeoff
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker image build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker image build -t $REGISTRY/$REPOSITORY:latest .
          docker image push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker image push $REGISTRY/$REPOSITORY:latest

      - name: Get task definition
        run: aws ecs describe-task-definition --task-definition timeoff-management-td > task-definition.json

      - name: Render Amazon ECS task definition
        id: render-image
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: timeoff
          IMAGE_TAG: ${{ github.sha }}
        with:
          task-definition: task-definition.json
          container-name: timeoff
          image: $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-image.outputs.task-definition }}
          service: timeoff-service
          cluster: dev-cluster
